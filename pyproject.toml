[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "custom-gift-send"
version = "3.2.0"
authors = [
    {name = "Nsvl", email = "huff-outer-siding@duck.com"},
]
description = "Максимально улучшенный асинхронный Python-модуль для Telegram Bot API с расширенной безопасностью, аналитикой и производительностью"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Topic :: Communications :: Chat",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Security",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: System :: Monitoring",
    "Topic :: System :: Networking",
    "Framework :: AsyncIO",
    "Typing :: Typed",
]
keywords = [
    "telegram", "bot", "api", "stars", "gift", "premium", 
    "security", "analytics", "rate-limiting", "webhook",
    "async", "asyncio", "performance", "monitoring",
    "ddos-protection", "circuit-breaker", "caching",
    "encryption", "authentication", "middleware"
]
dependencies = [
    "aiohttp>=3.8.4",
    "pydantic>=2.0.3",
    "cryptography>=41.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "flake8>=6.0.0",
    "pre-commit>=3.0.0",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "sphinx-autodoc-typehints>=1.20.0",
]
monitoring = [
    "prometheus-client>=0.17.0",
    "grafana-api>=1.0.3",
]
security = [
    "bandit>=1.7.5",
    "safety>=2.3.0",
]
performance = [
    "uvloop>=0.17.0; sys_platform != 'win32'",
    "orjson>=3.8.0",
]

[project.urls]
Homepage = "https://symphonious-kringle-d43f01.netlify.app/"
Documentation = "https://github.com/Nsvl/custom-gift-send/wiki"
Repository = "https://github.com/Nsvl/custom-gift-send"
"Bug Reports" = "https://github.com/Nsvl/custom-gift-send/issues"
Changelog = "https://github.com/Nsvl/custom-gift-send/blob/main/CHANGELOG.md"
"Security Policy" = "https://github.com/Nsvl/custom-gift-send/security/policy"
"Telegram Channel" = "https://t.me/GifterChannel"

[tool.setuptools.packages.find]
where = ["."]
include = ["custom_gift_send*"]

[tool.setuptools.package-data]
custom_gift_send = ["py.typed"]

# Конфигурация для инструментов разработки
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["custom_gift_send"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["custom_gift_send"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]